hist(dist)
}
for (i in 1:10){
dist <- rpois(5000, lambda=i)
hist(dist)
}
# Print the filtered values
print(filtered_values)
# Set the desired values
desired_values <- c(0, 3, 6, 9)
# Sample from a Poisson distribution with a specified lambda
lambda <- 5  # Adjust the lambda parameter as needed
sampled_values <- rpois(length(desired_values) * 1000, lambda)
# Filter the sampled values to include only the desired values
filtered_values <- sampled_values[sampled_values %in% desired_values]
# Print the filtered values
print(filtered_values)
# Print the filtered values
plot(density(filtered_values))
# Print the filtered values
plot(hist(filtered_values))
for (i in 1:10){
dist <- rpois(5000, lambda=i)
}
filtered_values <- dist[dist %in% desired_values]
plot(hist(filtered_values))
# values we want:
desired_values <- c(0, 3, 6, 9)
# Sample from a Poisson distribution with a specified lambda
lambda <- 5  # Adjust the lambda parameter as needed
sampled_values <- rpois(length(desired_values) * 1000, lambda) #in this sampling we actually only use the length ...
filtered_values <- sampled_values[sampled_values %in% desired_values]
plot(hist(filtered_values))
# values we want:
desired_values <- c(0, 3, 6, 9)
# Sample from a Poisson distribution with a specified lambda
lambda <- 5  # Adjust the lambda parameter as needed
sampled_values <- rpois(length(desired_values) * 1000, lambda) #in this sampling we actually only use the length ...
filtered_values <- sampled_values[sampled_values %in% desired_values]
hist(filtered_values)
set.seed(1)
# values we want:
desired_values <- c(0, 3, 6, 9)
# Sample from a Poisson distribution with a specified lambda
lambda <- 5  # Adjust the lambda parameter as needed
sampled_values <- rpois(length(desired_values) * 1000, lambda) #in this sampling we actually only use the length ...
filtered_values <- sampled_values[sampled_values %in% desired_values]
hist(filtered_values)
for (i in 1:10){
dist <- rpois(5000, lambda=i)
filtered_values <- dist[dist %in% desired_values]
hist(filtered_values)
}
hist(filtered_values, title(main = i))
desired_values <- c(0, 3, 6, 9) # trying for the dist to only holds these
for (i in 1:10){
dist <- rpois(5000, lambda=i)
filtered_values <- dist[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, title(main = i))
}
desired_values <- c(0, 3, 6, 9) # trying for the dist to only holds these
for (i in 1:10){
dist <- rpois(5000, lambda=i)
filtered_values <- dist[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, title(main = "hi"))
}
desired_values <- c(0, 3, 6, 9) # trying for the dist to only holds these
for (i in 1:10){
dist <- rpois(5000, lambda=i)
filtered_values <- dist[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, title = "hi")
}
hist(filtered_values, title("hi"))
desired_values <- c(0, 3, 6, 9) # trying for the dist to only holds these
for (i in 1:10){
dist <- rpois(5000, lambda=i)
filtered_values <- dist[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, title("hi"))
}
name="hi"
age=2
sprintf("Hello, %s. You are %s.", name, age)
for (i in 1:10){
dist <- rpois(5000, lambda=i)
filtered_values <- dist[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, title(sprintf(i)))
}
for (i in 1:10){
dist <- rpois(5000, lambda=i)
filtered_values <- dist[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, main = (sprintf("lampda is%s",i)))
}
desired_values <- c(0, 3, 6, 9) # trying for the dist to only holds these
for (i in 1:10){
dist <- rpois(5000, lambda=i)
filtered_values <- dist[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, main = (sprintf("lambda = %s",i)))
}
alpha <- c[0:10]
alpha <- c(0:10)
desired_values <- c(0, 3, 6, 9) # trying for the dist to only holds these
for (i in 1:alpha){
dist <- rpois(5000, lambda=i)
filtered_values <- dist[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, main = (sprintf("lambda = %s",i)))
}
desired_values <- c(0, 3, 6, 9) # trying for the dist to only holds these
for (i in 0:alpha){
dist <- rpois(5000, lambda=i)
filtered_values <- dist[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, main = (sprintf("lambda = %s",i)))
}
desired_values <- c(0, 3, 6, 9) # trying for the dist to only holds these
for (i in alpha){
dist <- rpois(5000, lambda=i)
filtered_values <- dist[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, main = (sprintf("lambda = %s",i)))
}
ntrials <-
alpha <- c(1:10) # dictates the initial contribution of others (should be 0,3,6,9) => can either be manipulated somehow ?? or 0,1,2,3 and the rescaled.
desired_values <- c(0, 3, 6, 9) # trying for the dist to only holds these
for (i in alpha){
dist <- rpois(5000, lambda=i)
filtered_values <- dist[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, main = (sprintf("lambda = %s",i)))
}
ntrials <- 1000
alpha <- c(1:10) # dictates the initial contribution of others (should be 0,3,6,9) => can either be manipulated somehow ?? or 0,1,2,3 and the rescaled.
omega <- c(1:10)
rho <- c(1:10)
desired_values <- c(0, 3, 6, 9) # trying for the dist to only holds these
for (i in alpha){
dist <- rpois(ntrials, lambda=i)
filtered_values <- dist[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, main = (sprintf("lambda = %s",i)))
}
spape1 = c(1:5)
shape2 = c(1:5)
for (i in shape1){
for (t in shape2){
sample <- rbeta(n = 100, shape1 = alpha, shape2 = beta)
curve(dbeta(sample, shape1 = i, shape2 = t), from = 0, to = 1,
xlab = "x", ylab = "Density", main = (sprintf("shape1 = %s", "shape2 = %s",i, t)))
}
}
shape1 = c(1:5)
shape2 = c(1:5)
for (i in shape1){
for (t in shape2){
sample <- rbeta(n = 100, shape1 = alpha, shape2 = beta)
curve(dbeta(sample, shape1 = i, shape2 = t), from = 0, to = 1,
xlab = "x", ylab = "Density", main = (sprintf("shape1 = %s", "shape2 = %s",i, t)))
}
}
for (i in shape1){
for (t in shape2){
sample <- rbeta(n = 100, shape1 = i, shape2 = t)
curve(dbeta(sample, shape1 = i, shape2 = t), from = 0, to = 1,
xlab = "x", ylab = "Density", main = (sprintf("shape1 = %s", "shape2 = %s",i, t)))
}
shape1 = c(1:5)
shape2 = c(1:5)
for (i in shape1){
for (t in shape2){
sample <- rbeta(n = 100, shape1 = i, shape2 = t)
curve(dbeta(sample, shape1 = i, shape2 = t), from = 0, to = 1,
xlab = "x", ylab = "Density", main = (sprintf("shape1 = %s", "shape2 = %s",i, t)))
}
}
shape1 = c(1:5)
shape2 = c(1:5)
for (i in shape1){
for (t in shape2){
sample <- rbeta(n = 100, shape1 = i, shape2 = t)
curve(dbeta(sample, shape1 = i, shape2 = t), from = 0, to = 1,
xlab = "x", ylab = "Density", main = (sprintf("shape1 = %s", "shape2 = %s",i, t)))
}
}
shape1 = c(1:5)
shape2 = c(1:5)
for (i in shape1){
for (t in shape2){
sample <- rbeta(n = 100, shape1 = i, shape2 = t)
curve(dbeta(x, shape1 = i, shape2 = t), from = 0, to = 1,
xlab = "x", ylab = "Density", main = (sprintf("shape1 = %s", "shape2 = %s",i, t)))
}
}
shape1 = c(1:5)
shape2 = c(1:5)
for (i in shape1){
for (t in shape2){
sample <- rbeta(n = 100, shape1 = i, shape2 = t)
curve(dbeta(x, shape1 = i, shape2 = t), from = 0, to = 1,
xlab = "x", ylab = "Density", main = (sprintf("shape1 = %s, shape2 = %s",i,t)))
}
}
shape1 = c(1:5)
shape2 = c(1:5)
for (i in shape1){
for (t in shape2){
sample <- rbeta(n = ntrials, shape1 = i, shape2 = t)
curve(dbeta(x, shape1 = i, shape2 = t), from = 0, to = 1,
xlab = "x", ylab = "Density", main = (sprintf("shape1 = %s, shape2 = %s",i,t)))
}
}
shape1 = c(1:5)
shape2 = c(1:5)
for (i in shape1){
for (t in shape2){
#sample <- rbeta(n = ntrials, shape1 = i, shape2 = t)
curve(dbeta(x, shape1 = i, shape2 = t), from = 0, to = 1,
xlab = "x", ylab = "Density", main = (sprintf("shape1 = %s, shape2 = %s",i,t)))
}
}
shape1 = c(1:5)
shape2 = c(1:5)
for (i in shape1){
for (t in shape2){
#sample <- rbeta(n = ntrials, shape1 = i, shape2 = t)
curve(rbeta(x, shape1 = i, shape2 = t), from = 0, to = 1,
xlab = "x", ylab = "Density", main = (sprintf("shape1 = %s, shape2 = %s",i,t)))
}
}
shape1 = c(1:5)
shape2 = c(1:5)
for (i in shape1){
for (t in shape2){
#sample <- rbeta(n = ntrials, shape1 = i, shape2 = t)
curve(dbeta(x, shape1 = i, shape2 = t), from = 0, to = 1,
xlab = "x", ylab = "Density", main = (sprintf("shape1 = %s, shape2 = %s",i,t)))
}
}
?dbeta
shape1 = c(1:5)
shape2 = c(1:5)
for (i in shape1){
for (t in shape2){
#sample <- rbeta(n = ntrials, shape1 = i, shape2 = t)
curve(dbeta(x, shape1 = i, shape2 = t), from = 0, to = 1,
xlab = "x", ylab = "Density", main = (sprintf("shape1 = %s, shape2 = %s",i,t)))
}
}
?dbeta
shape1 = c(1:5)
shape2 = c(1:5)
for (i in shape1){
for (t in shape2){
rho_samples <- rbeta(n = ntrials, shape1 = i, shape2 = t) # this isn't plotted but it gives the values
curve(dbeta(x, shape1 = i, shape2 = t), from = 0, to = 1,
xlab = "x", ylab = "Density", main = (sprintf("shape1 = %s, shape2 = %s",i,t)))
}
}
?dbeta
print(rho_samples)
#print(rho_samples)
##### this is not so good - we need them to be stored in another way - they are just added one top of each other in the loop, but we need to do it in a way in which we can identify their shape parameters
shape1 = c(3:8)
shape2 = c(1:5)
for (i in shape1){
for (t in shape2){
omega_samples <- rbeta(n = ntrials, shape1 = i, shape2 = t) # this isn't plotted but it gives the values
curve(dbeta(x, shape1 = i, shape2 = t), from = 0, to = 1,
xlab = "x", ylab = "Density", main = (sprintf("shape1 = %s, shape2 = %s",i,t)))
}
}
?dbeta
```{r}
getwd()
```{r}
source("Simulate_FUNC.R")
ntrials <- 1000
alpha <- c(1:10) # dictates the initial contribution of others (should be 0,3,6,9) => can either be manipulated somehow ?? or 0,1,2,3 and the rescaled.
desired_values <- c(0, 3, 6, 9) # trying for the dist to only holds these
hist(filtered_values, main = (sprintf("lambda = %s",i)))
for (i in alpha){
dist <- rpois(ntrials, lambda=i)
filtered_values <- dist[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, main = (sprintf("lambda = %s",i)))
}
for (i in alpha){
dist <- rpois(ntrials, lambda=i)
filtered_values <- dist#[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, main = (sprintf("lambda = %s",i)))
}
for (i in alpha){
dist <- rtpois(ntrials, lambda=i)
filtered_values <- dist#[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, main = (sprintf("lambda = %s",i)))
}
pacman::p_load(extraDistr)
for (i in alpha){
dist <- rtpois(ntrials, lambda=i, a = 0, b = 4)
filtered_values <- dist#[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, main = (sprintf("lambda = %s",i)))
}
?seq
rho <- seq(from = 0, to = 1, by =.1)
rho
omega <- seq(from = 0, to = 1, by =.1)
omega
alpha <- c(1:10) # dictates the initial contribution of others (should be 0,3,6,9) => can either be manipulated somehow ?? or 0,1,2,3 and the rescaled.
for (i in alpha){
dist <- rtpois(ntrials, lambda=i, a = 0, b = 4)
filtered_values <- dist#[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, main = (sprintf("lambda = %s",i)))
}
alpha_PLUS<- c(1:10) # dictates the initial contribution of others (should be 0,3,6,9) => can either be manipulated somehow ?? or 0,1,2,3 and the rescaled.
for (i in alpha_PLUS){
dist <- rtpois(ntrials, lambda=i, a = 0, b = 4)
filtered_values <- dist#[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, main = (sprintf("lambda = %s",i)))
}
alpha<- c(1:10) # dictates the initial contribution of others (should be 0,3,6,9) => can either be manipulated somehow ?? or 0,1,2,3 and the rescaled.
#### inspecting the outcome dist
for (i in alpha){
dist <- rtpois(ntrials, lambda=i, a = 0, b = 4)
filtered_values <- dist#[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, main = (sprintf("lambda = %s",i)))
}
empty_frame <- as.matrix(1000,15)
View(empty_frame)
empty_frame <- matrix(1000,15)
empty_frame <- matrix(NA,15,1000)
empty_frame <- matrix(NA,1000,15)
source("Simulate_FUNC.R")
source("Simulate_FUNC.R")
empty_frame <- data.frame()
c(1, 2, 3, omega)
empty_frame <- data.frame()
for (a in alpha){
for (r in rho){
for (o in omega)
contri <- hier_cc_sim(a,r,o)
new_row <- c(a, r, o, contri)
empty_frame <- rbind(empty_frame, new_row)
}
}
source("Simulate_FUNC.R")
empty_frame <- data.frame()
for (a in alpha){
for (r in rho){
for (o in omega)
contri <- hier_cc_sim(a,r,o)
new_row <- c(a, r, o, contri)
empty_frame <- rbind(empty_frame, new_row)
}
}
?rpois
source("Simulate_FUNC.R")
empty_frame <- data.frame()
for (a in alpha){
for (r in rho){
for (o in omega)
contri <- hier_cc_sim(a,r,o)
new_row <- c(a, r, o, contri)
empty_frame <- rbind(empty_frame, new_row)
}
}
source("Simulate_FUNC.R")
empty_frame <- data.frame()
for (a in alpha){
for (r in rho){
for (o in omega)
contri <- hier_cc_sim(a,r,o)
new_row <- c(a, r, o, contri)
empty_frame <- rbind(empty_frame, new_row)
}
}
View(empty_frame)
source("Simulate_FUNC.R")
empty_frame <- data.frame()
for (a in alpha){
for (r in rho){
for (o in omega){
contri <- hier_cc_sim(a,r,o)
new_row <- c(a, r, o, contri)
empty_frame <- rbind(empty_frame, new_row)
}
}
}
View(empty_frame)
alpha<- c(1:11) # dictates the initial contribution of others (should be 0,3,6,9) => can either be manipulated somehow ?? or 0,1,2,3 and the rescaled.
source("Simulate_FUNC.R")
empty_frame <- data.frame()
for (a in alpha){
for (r in rho){
for (o in omega){
contri <- hier_cc_sim(a,r,o)
new_row <- c(a, r, o, contri)
empty_frame <- rbind(empty_frame, new_row)
}
}
}
View(empty_frame)
plot_dat <- empty_frame %>%
select(-c("X0", "X1", "X0.1"))
pacman::p_load(extraDistr, tidyverse)
plot_dat <- empty_frame %>%
select(-c("X0", "X1", "X0.1"))
View(plot_dat)
View(plot_dat)
plot_dat <- empty_frame %>%
select(-c("X0", "X1", "X0.1"))
plot_wide <- t(plot_dat)
View(plot_wide)
plot_wide$trial <- c(1:12)
plot_wide$trial <- seq(1,12)
View(plot_wide)
plot_dat <- empty_frame %>%
select(-c("X0", "X1", "X0.1"))
plot_wide <- t(plot_dat)
plot_wide$trial <- seq(1,12)
plot_dat <- empty_frame %>%
select(-c("X0", "X1", "X0.1"))
plot_wide <- t(plot_dat)
plot_wide$trial <- c(0:12)
plot_dat <- empty_frame %>%
select(-c("X0", "X1", "X0.1"))
plot_wide <- t(plot_dat)
plot_wide$trial <- c(0:12)
plot_dat <- empty_frame %>%
select(-c("X0", "X1", "X0.1"))
plot_wide <- t(plot_dat)
plot_wide$trial <- c(1,2,3,4,5,6,7,8,9,10,11,12)
plot_dat <- empty_frame %>%
select(-c("X0", "X1", "X0.1"))
plot_wide <- t(plot_dat) %>%
mutate(trial = c(1:12))
plot_wide <- t(plot_dat) %>%
mutate(trial = seq(1:12))
plot_dat <- empty_frame %>%
select(-c("X0", "X1", "X0.1"))
plot_wide <- t(plot_dat) %>%
mutate(trial = seq(1:12))
plot_wide <- t(plot_dat) %>%
mutate(trial = seq(1,12))
plot_dat <- empty_frame %>%
select(-c("X0", "X1", "X0.1"))
plot_wide <- t(plot_dat) %>%
mutate(trial == seq(1,12))
plot_dat <- empty_frame %>%
select(-c("X0", "X1", "X0.1"))
plot_wide <- t(plot_dat) %>%
mutate(trial <- seq(1,12))
plot_wide <- t(plot_dat)
col <- data.frame(1:12)
View(col)
dat <- cbind(plot_wide, col)
View(dat)
View(col)
dat <- cbind(plot_wide, col) %>%
rename(trial = "X1.12")
dat_col <- colnames(dat)
dat_col
dat %>%
ggplot(aes(x = trial, y = dat_col[0:10])) +
geom_point()
dat %>%
ggplot(aes(x = trial, y = dat_col[0:10])) +
geom_line()
dat %>%
ggplot(aes(x = trial, y = .data[[dat_col[1]]])) +
geom_line()
dat %>%
ggplot(aes(x = trial, y = .data[[dat_col[1:10]]])) +
geom_line()
plot(dat$trial, dat$1)
plot(dat$trial, dat$1)
plot(dat$trial, dat$`1`)
View(dat)
for (s in seq(2:1331)){
lines(dat$trial, dat$`s`)
}
plot(dat$trial, dat$`1`)
for (s in seq(2:1331)){
lines(dat$trial, dat$`s`)
}
plot(dat$trial, dat$`1`, type = "l", ylim = c(0:12))
plot(dat$trial, dat$`1`, type = "l", ylim = c(0:12))
plot(dat$trial, dat$`1`, type = "l", ylim = 12)
plot(dat$trial, dat$`1`, type = "l", ylim = c(0,5))
for (s in seq(2:1331)){
lines(dat$trial, dat$`s`)
}
plot(x = dat$trial, y = dat$`1`, type = "l", ylim = c(0,5))
for (s in seq(2:1331)){
lines(x = dat$trial, y= dat$`s`)
}
dat %>%
gather(key = "variable", value = "value", 1:10) %>%
ggplot(aes(x = trial, y = value, color = variable)) +
geom_line()
dat %>%
gather(key = "variable", value = "value", 1:300) %>%
ggplot(aes(x = trial, y = value, color = variable)) +
geom_line()
for (s in seq(2:1331)){
lines(x = dat$trial, y= dat$`s`)
}
dat %>%
gather(key = "variable", value = "value", 1:10) %>%
ggplot(aes(x = trial, y = value, color = variable)) +
geom_line() +
guides(color = FALSE)
dat %>%
gather(key = "variable", value = "value", 1:20) %>%
ggplot(aes(x = trial, y = value, color = variable)) +
geom_line()
dat %>%
gather(key = "variable", value = "value", 1:100) %>%
ggplot(aes(x = trial, y = value, color = variable)) +
geom_line()
