trials <- array(1:12)
s1_cont <- c(9,9,9,9,3,0,0,0,9,9,9,9)
s2_cont <- c(9,6,6,6,0,0,0,0,3,0,0,0)
matrix_con <- matrix(c(s1_cont,s2_cont), 12, 2)
real_Ga <- rowMeans(matrix_con)
View(matrix_con)
source(simulate_FUNC.R)
source(Simulate_FUNC.R)
getwd()
source(Simulate_FUNC.R)
source("Simulate_FUNC.R")
View(hier_cc_sim)
dist <- ppois(16, lambda=12)
plot(density(dist))
dist <- rpois(1000, lambda=10)
plot(density(dist))
dist <- rpois(1000, lambda=5)
plot(density(dist))
dist <- rpois(1000, lambda=6)
plot(density(dist))
dist <- rpois(1000, lambda=7)
plot(density(dist))
dist <- rpois(1000, lambda=8)
plot(density(dist))
dist <- rpois(1000, lambda=4)
plot(density(dist))
dist <- rpois(5000, lambda=4)
plot(density(dist))
dist <- rpois(5000, lambda=4)
plot(hist(dist))
dist <- rpois(5000, lambda=4)
hist(dist)
for (i in 1:10){
dist <- rpois(5000, lambda=i)
hist(dist)
}
for (i in 1:10){
dist <- rpois(5000, lambda=i)
hist(dist)
}
# Print the filtered values
print(filtered_values)
# Set the desired values
desired_values <- c(0, 3, 6, 9)
# Sample from a Poisson distribution with a specified lambda
lambda <- 5  # Adjust the lambda parameter as needed
sampled_values <- rpois(length(desired_values) * 1000, lambda)
# Filter the sampled values to include only the desired values
filtered_values <- sampled_values[sampled_values %in% desired_values]
# Print the filtered values
print(filtered_values)
# Print the filtered values
plot(density(filtered_values))
# Print the filtered values
plot(hist(filtered_values))
for (i in 1:10){
dist <- rpois(5000, lambda=i)
}
filtered_values <- dist[dist %in% desired_values]
plot(hist(filtered_values))
# values we want:
desired_values <- c(0, 3, 6, 9)
# Sample from a Poisson distribution with a specified lambda
lambda <- 5  # Adjust the lambda parameter as needed
sampled_values <- rpois(length(desired_values) * 1000, lambda) #in this sampling we actually only use the length ...
filtered_values <- sampled_values[sampled_values %in% desired_values]
plot(hist(filtered_values))
# values we want:
desired_values <- c(0, 3, 6, 9)
# Sample from a Poisson distribution with a specified lambda
lambda <- 5  # Adjust the lambda parameter as needed
sampled_values <- rpois(length(desired_values) * 1000, lambda) #in this sampling we actually only use the length ...
filtered_values <- sampled_values[sampled_values %in% desired_values]
hist(filtered_values)
set.seed(1)
# values we want:
desired_values <- c(0, 3, 6, 9)
# Sample from a Poisson distribution with a specified lambda
lambda <- 5  # Adjust the lambda parameter as needed
sampled_values <- rpois(length(desired_values) * 1000, lambda) #in this sampling we actually only use the length ...
filtered_values <- sampled_values[sampled_values %in% desired_values]
hist(filtered_values)
for (i in 1:10){
dist <- rpois(5000, lambda=i)
filtered_values <- dist[dist %in% desired_values]
hist(filtered_values)
}
hist(filtered_values, title(main = i))
desired_values <- c(0, 3, 6, 9) # trying for the dist to only holds these
for (i in 1:10){
dist <- rpois(5000, lambda=i)
filtered_values <- dist[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, title(main = i))
}
desired_values <- c(0, 3, 6, 9) # trying for the dist to only holds these
for (i in 1:10){
dist <- rpois(5000, lambda=i)
filtered_values <- dist[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, title(main = "hi"))
}
desired_values <- c(0, 3, 6, 9) # trying for the dist to only holds these
for (i in 1:10){
dist <- rpois(5000, lambda=i)
filtered_values <- dist[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, title = "hi")
}
hist(filtered_values, title("hi"))
desired_values <- c(0, 3, 6, 9) # trying for the dist to only holds these
for (i in 1:10){
dist <- rpois(5000, lambda=i)
filtered_values <- dist[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, title("hi"))
}
name="hi"
age=2
sprintf("Hello, %s. You are %s.", name, age)
for (i in 1:10){
dist <- rpois(5000, lambda=i)
filtered_values <- dist[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, title(sprintf(i)))
}
for (i in 1:10){
dist <- rpois(5000, lambda=i)
filtered_values <- dist[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, main = (sprintf("lampda is%s",i)))
}
desired_values <- c(0, 3, 6, 9) # trying for the dist to only holds these
for (i in 1:10){
dist <- rpois(5000, lambda=i)
filtered_values <- dist[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, main = (sprintf("lambda = %s",i)))
}
alpha <- c[0:10]
alpha <- c(0:10)
desired_values <- c(0, 3, 6, 9) # trying for the dist to only holds these
for (i in 1:alpha){
dist <- rpois(5000, lambda=i)
filtered_values <- dist[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, main = (sprintf("lambda = %s",i)))
}
desired_values <- c(0, 3, 6, 9) # trying for the dist to only holds these
for (i in 0:alpha){
dist <- rpois(5000, lambda=i)
filtered_values <- dist[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, main = (sprintf("lambda = %s",i)))
}
desired_values <- c(0, 3, 6, 9) # trying for the dist to only holds these
for (i in alpha){
dist <- rpois(5000, lambda=i)
filtered_values <- dist[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, main = (sprintf("lambda = %s",i)))
}
ntrials <-
alpha <- c(1:10) # dictates the initial contribution of others (should be 0,3,6,9) => can either be manipulated somehow ?? or 0,1,2,3 and the rescaled.
desired_values <- c(0, 3, 6, 9) # trying for the dist to only holds these
for (i in alpha){
dist <- rpois(5000, lambda=i)
filtered_values <- dist[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, main = (sprintf("lambda = %s",i)))
}
ntrials <- 1000
alpha <- c(1:10) # dictates the initial contribution of others (should be 0,3,6,9) => can either be manipulated somehow ?? or 0,1,2,3 and the rescaled.
omega <- c(1:10)
rho <- c(1:10)
desired_values <- c(0, 3, 6, 9) # trying for the dist to only holds these
for (i in alpha){
dist <- rpois(ntrials, lambda=i)
filtered_values <- dist[dist %in% desired_values] # this is a very un-elegant way - cause samples for all but we pick the once we want
hist(filtered_values, main = (sprintf("lambda = %s",i)))
}
spape1 = c(1:5)
shape2 = c(1:5)
for (i in shape1){
for (t in shape2){
sample <- rbeta(n = 100, shape1 = alpha, shape2 = beta)
curve(dbeta(sample, shape1 = i, shape2 = t), from = 0, to = 1,
xlab = "x", ylab = "Density", main = (sprintf("shape1 = %s", "shape2 = %s",i, t)))
}
}
shape1 = c(1:5)
shape2 = c(1:5)
for (i in shape1){
for (t in shape2){
sample <- rbeta(n = 100, shape1 = alpha, shape2 = beta)
curve(dbeta(sample, shape1 = i, shape2 = t), from = 0, to = 1,
xlab = "x", ylab = "Density", main = (sprintf("shape1 = %s", "shape2 = %s",i, t)))
}
}
for (i in shape1){
for (t in shape2){
sample <- rbeta(n = 100, shape1 = i, shape2 = t)
curve(dbeta(sample, shape1 = i, shape2 = t), from = 0, to = 1,
xlab = "x", ylab = "Density", main = (sprintf("shape1 = %s", "shape2 = %s",i, t)))
}
shape1 = c(1:5)
shape2 = c(1:5)
for (i in shape1){
for (t in shape2){
sample <- rbeta(n = 100, shape1 = i, shape2 = t)
curve(dbeta(sample, shape1 = i, shape2 = t), from = 0, to = 1,
xlab = "x", ylab = "Density", main = (sprintf("shape1 = %s", "shape2 = %s",i, t)))
}
}
shape1 = c(1:5)
shape2 = c(1:5)
for (i in shape1){
for (t in shape2){
sample <- rbeta(n = 100, shape1 = i, shape2 = t)
curve(dbeta(sample, shape1 = i, shape2 = t), from = 0, to = 1,
xlab = "x", ylab = "Density", main = (sprintf("shape1 = %s", "shape2 = %s",i, t)))
}
}
shape1 = c(1:5)
shape2 = c(1:5)
for (i in shape1){
for (t in shape2){
sample <- rbeta(n = 100, shape1 = i, shape2 = t)
curve(dbeta(x, shape1 = i, shape2 = t), from = 0, to = 1,
xlab = "x", ylab = "Density", main = (sprintf("shape1 = %s", "shape2 = %s",i, t)))
}
}
shape1 = c(1:5)
shape2 = c(1:5)
for (i in shape1){
for (t in shape2){
sample <- rbeta(n = 100, shape1 = i, shape2 = t)
curve(dbeta(x, shape1 = i, shape2 = t), from = 0, to = 1,
xlab = "x", ylab = "Density", main = (sprintf("shape1 = %s, shape2 = %s",i,t)))
}
}
shape1 = c(1:5)
shape2 = c(1:5)
for (i in shape1){
for (t in shape2){
sample <- rbeta(n = ntrials, shape1 = i, shape2 = t)
curve(dbeta(x, shape1 = i, shape2 = t), from = 0, to = 1,
xlab = "x", ylab = "Density", main = (sprintf("shape1 = %s, shape2 = %s",i,t)))
}
}
shape1 = c(1:5)
shape2 = c(1:5)
for (i in shape1){
for (t in shape2){
#sample <- rbeta(n = ntrials, shape1 = i, shape2 = t)
curve(dbeta(x, shape1 = i, shape2 = t), from = 0, to = 1,
xlab = "x", ylab = "Density", main = (sprintf("shape1 = %s, shape2 = %s",i,t)))
}
}
shape1 = c(1:5)
shape2 = c(1:5)
for (i in shape1){
for (t in shape2){
#sample <- rbeta(n = ntrials, shape1 = i, shape2 = t)
curve(rbeta(x, shape1 = i, shape2 = t), from = 0, to = 1,
xlab = "x", ylab = "Density", main = (sprintf("shape1 = %s, shape2 = %s",i,t)))
}
}
shape1 = c(1:5)
shape2 = c(1:5)
for (i in shape1){
for (t in shape2){
#sample <- rbeta(n = ntrials, shape1 = i, shape2 = t)
curve(dbeta(x, shape1 = i, shape2 = t), from = 0, to = 1,
xlab = "x", ylab = "Density", main = (sprintf("shape1 = %s, shape2 = %s",i,t)))
}
}
?dbeta
shape1 = c(1:5)
shape2 = c(1:5)
for (i in shape1){
for (t in shape2){
#sample <- rbeta(n = ntrials, shape1 = i, shape2 = t)
curve(dbeta(x, shape1 = i, shape2 = t), from = 0, to = 1,
xlab = "x", ylab = "Density", main = (sprintf("shape1 = %s, shape2 = %s",i,t)))
}
}
?dbeta
shape1 = c(1:5)
shape2 = c(1:5)
for (i in shape1){
for (t in shape2){
rho_samples <- rbeta(n = ntrials, shape1 = i, shape2 = t) # this isn't plotted but it gives the values
curve(dbeta(x, shape1 = i, shape2 = t), from = 0, to = 1,
xlab = "x", ylab = "Density", main = (sprintf("shape1 = %s, shape2 = %s",i,t)))
}
}
?dbeta
print(rho_samples)
#print(rho_samples)
##### this is not so good - we need them to be stored in another way - they are just added one top of each other in the loop, but we need to do it in a way in which we can identify their shape parameters
shape1 = c(3:8)
shape2 = c(1:5)
for (i in shape1){
for (t in shape2){
omega_samples <- rbeta(n = ntrials, shape1 = i, shape2 = t) # this isn't plotted but it gives the values
curve(dbeta(x, shape1 = i, shape2 = t), from = 0, to = 1,
xlab = "x", ylab = "Density", main = (sprintf("shape1 = %s, shape2 = %s",i,t)))
}
}
?dbeta
